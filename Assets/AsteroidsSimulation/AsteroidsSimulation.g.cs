//AUTOGENERATED//

using System;
using System.Runtime.InteropServices;
using Engine;
using UnityEngine;

public static unsafe class AsteroidsSimulation
{
    private const string dllPath = "Assets/AsteroidsSimulation/x64/Debug/AsteroidsSimulation.dll";
    private static IntPtr dllHandle = IntPtr.Zero;

    public unsafe struct SimulationSettings
    {
       public Vector2 mapSize;
       public Vector2 asteroidSizeRange;
       public Vector2 asteroidSpeedRange;
       public float initialAsteroidCount;
       public float shipRotationSpeed;
       public float shipAcceleration;
    }

    public unsafe struct UserInputCommand
    {
       public Vector2 steer;
    }

    public unsafe struct Body
    {
       public float radius;
       public float rotation;
       public Vector2 position;
       public Vector2 velocity;
       public Vector2 acceleration;
    }

    public delegate void setupCallbacksDelegate(void* logErrorCallback, void* logMessageCallback);
    public static setupCallbacksDelegate setupCallbacks;

    public delegate void* instantiateDelegate(SimulationSettings settings);
    public static instantiateDelegate instantiate;

    public delegate void updateDelegate(void* ptr);
    public static updateDelegate update;

    public delegate void disposeDelegate(void* ptr);
    public static disposeDelegate dispose;

    public delegate void sendCommandDelegate(void* ptr, UserInputCommand cmd);
    public static sendCommandDelegate sendCommand;

    public delegate UnmanagedArray getBodyEntitiesDelegate(void* ptr);
    public static getBodyEntitiesDelegate getBodyEntities;

    public delegate Body getBodyDelegate(void* ptr, Entity entity);
    public static getBodyDelegate getBody;

    
    public static void Initialize()
    {
        dllHandle = DllLoader.OpenLibrary(dllPath);

        setupCallbacks = DllLoader.GetDelegate<setupCallbacksDelegate>(dllHandle, "setupCallbacks");
        instantiate = DllLoader.GetDelegate<instantiateDelegate>(dllHandle, "instantiate");
        update = DllLoader.GetDelegate<updateDelegate>(dllHandle, "update");
        dispose = DllLoader.GetDelegate<disposeDelegate>(dllHandle, "dispose");
        sendCommand = DllLoader.GetDelegate<sendCommandDelegate>(dllHandle, "sendCommand");
        getBodyEntities = DllLoader.GetDelegate<getBodyEntitiesDelegate>(dllHandle, "getBodyEntities");
        getBody = DllLoader.GetDelegate<getBodyDelegate>(dllHandle, "getBody");

    }

    public static void Dispose()
    {
        DllLoader.CloseLibrary(dllHandle);
    }
}
